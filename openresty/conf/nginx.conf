user  root;
worker_processes auto;
worker_rlimit_nofile 65536;
events {
    worker_connections 16384;
    multi_accept on;
} 
http {
    charset UTF-8;
    include       mime.types;
    default_type  application/octet-stream; 
    sendfile        on; 
    keepalive_timeout  65;

    resolver local=on ipv6=off;
    resolver_timeout 5s;

    log_format aliyun escape=json '"$remote_addr" "$time_iso8601"  "$host" "$request_method" "$uri" "$status" "$request_time" "$http_ctl_user_id" "$http_x_forwarded_for" "$http_user_agent"';

    lua_code_cache on;
    # gzip  on;
    # config
    client_max_body_size 0;

    # 定义全局变量，变量值将在controller程序中初始化。
    lua_shared_dict upstreams 10m;
    lua_shared_dict config 10m;
    lua_shared_dict ingress 30m;
    lua_shared_dict domains 30m;

    #userConfig
    lua_shared_dict userdict 30m;
    #roleId-method-url --> valid
    lua_shared_dict authpath 30m;

    lua_socket_log_errors off;

    # apigateway begin
    init_by_lua_block {
        apigw = require 'gateway'
        apigw.init()
    }

    init_worker_by_lua_block {
        apigw.init_worker(ngx.ctx)
    }
    # apigateway end

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    upstream backend {
        server 0.0.0.0;
        balancer_by_lua_block {
            apigw.balancer(ngx.ctx)
        }
        keepalive 32;
    } 

    # 业务服务侦听端口
    server {
        listen 80;
        listen 443 ssl http2;
        error_page 400 404 408 411 412 413 414 417 494 /gw_error_handler;
        error_page 500 502 503 504 /gw_error_handler;

        ssl_certificate             server.crt;
        ssl_certificate_key         server.key;
        ssl_protocols               TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_certificate_by_lua_block {
            apigw.ssl_certificate()
        }
        ssl_session_cache           shared:SSL:10m;
        ssl_session_timeout         10m;
        ssl_prefer_server_ciphers   on;
        ssl_ciphers                 ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;

        access_log  /var/log/on.acc.log aliyun; 
        error_log  /var/log/on.err.log info;
        
        location / {
            # 定义变量
            set $api_gw_error                       '';
            set $upstream                           '';
            set $ingres                             '';

            rewrite_by_lua_block {
                apigw.rewrite()
            }

            access_by_lua_block {
                apigw.access()
            }

            proxy_set_header    Host                $http_host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    X-Forwarded-Prot    $server_port;
            proxy_set_header    Upgrade             $http_upgrade;
            proxy_set_header    Connection          $connection_upgrade;
            proxy_pass_header   Server;
            proxy_pass_header   Date;
            proxy_pass          http://backend;

            header_filter_by_lua_block {
                apigw.header_filter()
            }
            body_filter_by_lua_block {
                apigw.body_filter()
            }
        }
        
        location = /gw_error_handler {
            internal;
            content_by_lua_block {
                apigw.handle_error()
            }
        }
        location /gw_health {
            default_type text/html;
            content_by_lua '
                ngx.say("ok")
            ';
        }
        location /robots.txt {
            content_by_lua_block {
                apigw.robots()
            }
        }
        location /test {
            proxy_set_header    Host                $http_host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    X-Forwarded-Prot    $server_port;
            proxy_set_header    Upgrade             $http_upgrade;
            proxy_set_header    Connection          $connection_upgrade;
            proxy_pass_header   Server;
            proxy_pass_header   Date;
            proxy_pass          http://backend;

            header_filter_by_lua_block {
                apigw.header_filter(ngx.ctx)
            }
            body_filter_by_lua_block {
                apigw.body_filter(ngx.ctx)
            }
            rewrite_by_lua_block {
                apigw.rewrite(ngx.ctx)
            }
            access_by_lua_block {
                apigw.access(ngx.ctx)
            }
            content_by_lua_block {
                apigw.content(ngx.ctx)
            }
        }
    }

    # 件句柄内部侦听，  供controller程序内部访问
    server {
        listen unix:/var/run/apigw.sock;
        server_name apigw_admin;
        client_max_body_size 10m;
        client_body_buffer_size 10m;
        lua_need_request_body on;
        location / {
            default_type application/json;
            content_by_lua_block {
                apigw.admin_api()
            }
        }
        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }

    include ./conf.d/*.conf;
}
